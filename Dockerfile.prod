# Multi-stage production Dockerfile for Auth Service

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Generate Prisma client
RUN npx prisma generate

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Copy static assets to dist
RUN cp -r views dist/ && cp -r public dist/

# Production stage
FROM node:18-alpine AS production

# Install security updates and necessary packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S auth-service -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=auth-service:nodejs /app/dist ./dist
COPY --from=builder --chown=auth-service:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=auth-service:nodejs /app/package.json ./package.json
COPY --from=builder --chown=auth-service:nodejs /app/prisma ./prisma

# Create logs directory
RUN mkdir -p /app/logs && chown auth-service:nodejs /app/logs

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3001/monitoring/health || exit 1

# Switch to non-root user
USER auth-service

# Expose port
EXPOSE 3001

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main.js"]