import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { INestApplication } from '@nestjs/common';

export function setupSwagger(app: INestApplication): void {
  const config = new DocumentBuilder()
    .setTitle('Auth Service API')
    .setDescription(`
# ‰ºÅ‰∏öÁ∫ßËÆ§ËØÅÊúçÂä° API ÊñáÊ°£

## üîê ÊúçÂä°ÁÆÄ‰ªã

Auth Service ÊòØ‰∏Ä‰∏™ÂÆåÊï¥ÁöÑ‰ºÅ‰∏öÁ∫ßËÆ§ËØÅ‰∏éÊùÉÈôêÁÆ°ÁêÜÊúçÂä°ÔºåÊèê‰æõ‰ª•‰∏ãÊ†∏ÂøÉÂäüËÉΩÔºö

- **Áî®Êà∑ËÆ§ËØÅ**: JWT Token + Refresh Token Êú∫Âà∂
- **Â§öÁßüÊà∑ÊîØÊåÅ**: ÂÆåÊï¥ÁöÑÁßüÊà∑ÈöîÁ¶ªÂíåÁÆ°ÁêÜ
- **Á¨¨‰∏âÊñπÁôªÂΩï**: GitHub„ÄÅGoogle„ÄÅÂæÆ‰ø° OAuth ÈõÜÊàê
- **ÈÇÆ‰ª∂È™åËØÅ**: Ê≥®ÂÜåÈ™åËØÅ„ÄÅÂØÜÁ†ÅÈáçÁΩÆÁ≠âÈÇÆ‰ª∂ÊúçÂä°
- **Áü≠‰ø°ÊúçÂä°**: ÂõΩÈôÖÁü≠‰ø°È™åËØÅÁ†ÅÊîØÊåÅ
- **ÁõëÊéßÂëäË≠¶**: ÂÆûÊó∂ÊÄßËÉΩÁõëÊéßÂíåÊô∫ËÉΩÂëäË≠¶
- **ÂäüËÉΩÂºÄÂÖ≥**: Âä®ÊÄÅÂäüËÉΩÂêØÁî®/Á¶ÅÁî®ÊéßÂà∂
- **ÊÄßËÉΩ‰ºòÂåñ**: ÁºìÂ≠ò„ÄÅÂπ∂ÂèëÂ§ÑÁêÜ„ÄÅÊï∞ÊçÆÂ∫ì‰ºòÂåñ

## üöÄ Âø´ÈÄüÂºÄÂßã

### 1. Ëé∑Âèñ API Key

È¶ñÂÖàÈúÄË¶ÅÂàõÂª∫ÁßüÊà∑Âπ∂Ëé∑Âèñ API KeyÔºö

\`\`\`bash
curl -X POST https://auth.example.com/tenant \\
  -H "Content-Type: application/json" \\
  -d '{
    "name": "My Company",
    "domain": "mycompany.com"
  }'
\`\`\`

### 2. Áî®Êà∑Ê≥®ÂÜå

\`\`\`bash
curl -X POST https://auth.example.com/auth/register \\
  -H "Content-Type: application/json" \\
  -H "Authorization: Bearer YOUR_API_KEY" \\
  -d '{
    "email": "user@example.com",
    "password": "SecurePassword123!",
    "firstName": "John",
    "lastName": "Doe"
  }'
\`\`\`

### 3. Áî®Êà∑ÁôªÂΩï

\`\`\`bash
curl -X POST https://auth.example.com/auth/login \\
  -H "Content-Type: application/json" \\
  -H "Authorization: Bearer YOUR_API_KEY" \\
  -d '{
    "email": "user@example.com",
    "password": "SecurePassword123!"
  }'
\`\`\`

## üîë ËÆ§ËØÅÊñπÂºè

Êú¨ API ÊîØÊåÅ‰∏§ÁßçËÆ§ËØÅÊñπÂºèÔºö

### 1. API Key ËÆ§ËØÅ (Áî®‰∫éÊúçÂä°Á´ØË∞ÉÁî®)
Âú®ËØ∑Ê±ÇÂ§¥‰∏≠Ê∑ªÂä†Ôºö\`Authorization: Bearer YOUR_API_KEY\`

### 2. JWT Token ËÆ§ËØÅ (Áî®‰∫éÁî®Êà∑‰ºöËØù)
Âú®ËØ∑Ê±ÇÂ§¥‰∏≠Ê∑ªÂä†Ôºö\`Authorization: Bearer JWT_TOKEN\`

## üìä Áä∂ÊÄÅÁ†ÅËØ¥Êòé

- **200**: ËØ∑Ê±ÇÊàêÂäü
- **201**: ËµÑÊ∫êÂàõÂª∫ÊàêÂäü
- **400**: ËØ∑Ê±ÇÂèÇÊï∞ÈîôËØØ
- **401**: Êú™ÊéàÊùÉËÆøÈóÆ
- **403**: ÊùÉÈôê‰∏çË∂≥
- **404**: ËµÑÊ∫ê‰∏çÂ≠òÂú®
- **429**: ËØ∑Ê±ÇÈ¢ëÁéáËøáÈ´ò
- **500**: ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ

## üèóÔ∏è Êû∂ÊûÑÁâπÁÇπ

- **ÂæÆÊúçÂä°Êû∂ÊûÑ**: Áã¨Á´ãÈÉ®ÁΩ≤ÔºåÂèØÊ∞¥Âπ≥Êâ©Â±ï
- **Â§öÁßüÊà∑ËÆæËÆ°**: Â§©ÁÑ∂ÊîØÊåÅ SaaS Ê®°Âºè
- **È´òÂèØÁî®**: Redis ÁºìÂ≠ò + Êï∞ÊçÆÂ∫ì‰∏ª‰ªé
- **ÂÆâÂÖ®Èò≤Êä§**: ÈÄüÁéáÈôêÂà∂„ÄÅÊö¥ÂäõÁ†¥Ëß£‰øùÊä§
- **ÁõëÊéßËøêÁª¥**: ÂÆåÊï¥ÁöÑÁõëÊéßÂíåÂëäË≠¶‰ΩìÁ≥ª

## üîó Áõ∏ÂÖ≥ÈìæÊé•

- [ÊúçÂä°Áä∂ÊÄÅÈ°µÈù¢](/monitoring/health)
- [ÁÆ°ÁêÜÂêéÂè∞](/admin)
- [ÂäüËÉΩÂºÄÂÖ≥ÁÆ°ÁêÜ](/feature-flags)
- [ÊÄßËÉΩÁõëÊéß](/performance/stats)
    `)
    .setVersion('1.0.0')
    .setContact(
      'Auth Service Team',
      'https://github.com/yourorg/auth-service',
      'support@yourcompany.com'
    )
    .setLicense('MIT', 'https://opensource.org/licenses/MIT')
    .addServer('http://localhost:3001', 'Development Server')
    .addServer('https://auth-staging.example.com', 'Staging Server')
    .addServer('https://auth.example.com', 'Production Server')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: 'Enter JWT token',
        in: 'header',
      },
      'JWT-auth'
    )
    .addApiKey(
      {
        type: 'apiKey',
        name: 'Authorization',
        in: 'header',
        description: 'API Key authentication (Bearer YOUR_API_KEY)',
      },
      'ApiKey-auth'
    )
    .addTag('Authentication', 'Áî®Êà∑ËÆ§ËØÅÁõ∏ÂÖ≥Êé•Âè£')
    .addTag('User Management', 'Áî®Êà∑ÁÆ°ÁêÜÊé•Âè£')
    .addTag('Tenant Management', 'ÁßüÊà∑ÁÆ°ÁêÜÊé•Âè£')
    .addTag('OAuth Integration', 'Á¨¨‰∏âÊñπÁôªÂΩïÈõÜÊàê')
    .addTag('Email Services', 'ÈÇÆ‰ª∂ÊúçÂä°Êé•Âè£')
    .addTag('SMS Services', 'Áü≠‰ø°ÊúçÂä°Êé•Âè£')
    .addTag('Monitoring', 'ÁõëÊéßÁ≥ªÁªüÊé•Âè£')
    .addTag('Feature Flags', 'ÂäüËÉΩÂºÄÂÖ≥ÁÆ°ÁêÜ')
    .addTag('Performance', 'ÊÄßËÉΩ‰ºòÂåñÊé•Âè£')
    .addTag('Admin Panel', 'ÁÆ°ÁêÜÂêéÂè∞Êé•Âè£')
    .addTag('Health Check', 'ÂÅ•Â∫∑Ê£ÄÊü•Êé•Âè£')
    .build();

  const document = SwaggerModule.createDocument(app, config, {
    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,
    deepScanRoutes: true,
  });

  // Ëá™ÂÆö‰πâ Swagger UI ÈÖçÁΩÆ
  SwaggerModule.setup('api/docs', app, document, {
    swaggerOptions: {
      persistAuthorization: true,
      displayRequestDuration: true,
      filter: true,
      showExtensions: true,
      showCommonExtensions: true,
      docExpansion: 'none',
      defaultModelExpandDepth: 2,
      defaultModelsExpandDepth: 1,
      operationsSorter: 'alpha',
      tagsSorter: 'alpha',
    },
    customSiteTitle: 'Auth Service API Documentation',
    customfavIcon: '/favicon.ico',
    customJs: [
      'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.15.5/swagger-ui-bundle.min.js',
      'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.15.5/swagger-ui-standalone-preset.min.js',
    ],
    customCssUrl: [
      'https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/4.15.5/swagger-ui.min.css',
    ],
  });

  // ÁîüÊàê JSON ÊñáÊ°£Á´ØÁÇπ
  SwaggerModule.setup('api/docs-json', app, document);
}

export function getSwaggerDocument(app: INestApplication) {
  const config = new DocumentBuilder()
    .setTitle('Auth Service API')
    .setDescription('Enterprise Authentication Service API Documentation')
    .setVersion('1.0.0')
    .build();

  return SwaggerModule.createDocument(app, config);
}